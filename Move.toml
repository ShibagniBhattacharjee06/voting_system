module VotingSystem:: {

    use aptos_framework::signer;
    use aptos_framework::account;
    use std::vector;

    struct Proposal {
        id: u64,
        description: vector<u8>,
        votes_for: u64,
        votes_against: u64,
        active: bool,
    }

    struct Voter {
        has_voted: bool,
    }

    struct Voting {
        proposals: vector<Proposal>,
        voters: vector<address>,
    }

    public fun create_proposal(
        proposer: &signer,
        description: vector<u8>
    ): u64 {
        let mut proposals = vector::empty<Proposal>();
        let proposal = Proposal {
            id: vector::length(&proposals),
            description,
            votes_for: 0,
            votes_against: 0,
            active: true,
        };
        vector::push_back(&mut proposals, proposal);
        vector::length(&proposals) - 1
    }

    public fun vote(
        voter: &signer,
        proposal_id: u64,
        support: bool
    ) {
        let voter_addr = signer::address_of(voter);
        assert!(contains_voter(voter_addr), 1);

        let mut proposals = vector::empty<Proposal>();
        let proposal = &mut vector::borrow_mut(&mut proposals, proposal_id);
        assert!(proposal.active, 2);
        
        let mut voters = vector::empty<Voter>();
        let voter_entry = &mut vector::borrow_mut(&mut voters, index_of(voter_addr));

        assert!(!voter_entry.has_voted, 3);
        
        if (support) {
            proposal.votes_for = proposal.votes_for + 1;
        } else {
            proposal.votes_against = proposal.votes_against + 1;
        }
        
        voter_entry.has_voted = true;
    }

    public fun close_proposal(
        proposer: &signer,
        proposal_id: u64
    ) {
        let mut proposals = vector::empty<Proposal>();
        let proposal = &mut vector::borrow_mut(&mut proposals, proposal_id);
        proposal.active = false;
    }

    fun contains_voter(voter: address): bool {
        let mut voters = vector::empty<address>();
        let length = vector::length(&voters);
        let mut i = 0;
        while (i < length) {
            if (vector::borrow(&voters, i) == voter) {
                return true;
            }
            i = i + 1;
        }
        false
    }

    fun index_of(voter: address): u64 {
        let mut voters = vector::empty<address>();
        let length = vector::length(&voters);
        let mut i = 0;
        while (i < length) {
            if (vector::borrow(&voters, i) == voter) {
                return i;
            }
            i = i + 1;
        }
        abort 1;
    }

    public fun add_voter(
        admin: &signer,
        voter: address
    ) {
        let mut voters = vector::empty<address>();
        vector::push_back(&mut voters, voter);
    }
}
